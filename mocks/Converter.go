// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	certificate "github.com/blocky/nitriding/internal/certificate"
	mock "github.com/stretchr/testify/mock"
)

// Converter is an autogenerated mock type for the Converter type
type Converter struct {
	mock.Mock
}

// DerToDigest provides a mock function with given fields: derBytes
func (_m *Converter) DerToDigest(derBytes certificate.DerBytes) certificate.DigestBytes {
	ret := _m.Called(derBytes)

	var r0 certificate.DigestBytes
	if rf, ok := ret.Get(0).(func(certificate.DerBytes) certificate.DigestBytes); ok {
		r0 = rf(derBytes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(certificate.DigestBytes)
		}
	}

	return r0
}

// DerToPem provides a mock function with given fields: derBytes
func (_m *Converter) DerToPem(derBytes certificate.DerBytes) (certificate.PemBytes, error) {
	ret := _m.Called(derBytes)

	var r0 certificate.PemBytes
	if rf, ok := ret.Get(0).(func(certificate.DerBytes) certificate.PemBytes); ok {
		r0 = rf(derBytes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(certificate.PemBytes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(certificate.DerBytes) error); ok {
		r1 = rf(derBytes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PemToDer provides a mock function with given fields: pemBytes
func (_m *Converter) PemToDer(pemBytes certificate.PemBytes) (certificate.DerBytes, error) {
	ret := _m.Called(pemBytes)

	var r0 certificate.DerBytes
	if rf, ok := ret.Get(0).(func(certificate.PemBytes) certificate.DerBytes); ok {
		r0 = rf(pemBytes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(certificate.DerBytes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(certificate.PemBytes) error); ok {
		r1 = rf(pemBytes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewConverter interface {
	mock.TestingT
	Cleanup(func())
}

// NewConverter creates a new instance of Converter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewConverter(t mockConstructorTestingTNewConverter) *Converter {
	mock := &Converter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
