// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	http "net/http"

	certificate "github.com/blocky/nitriding/internal/certificate"

	mock "github.com/stretchr/testify/mock"
)

// Server is an autogenerated mock type for the Server type
type Server struct {
	mock.Mock
}

// AddRoute provides a mock function with given fields: method, pattern, handlerFn
func (_m *Server) AddRoute(method string, pattern string, handlerFn http.HandlerFunc) error {
	ret := _m.Called(method, pattern, handlerFn)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, http.HandlerFunc) error); ok {
		r0 = rf(method, pattern, handlerFn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CodeURL provides a mock function with given fields:
func (_m *Server) CodeURL() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetAttestDoc provides a mock function with given fields: nonce, publicKey, userData
func (_m *Server) Attest(nonce []byte, publicKey []byte, userData []byte) ([]byte, error) {
	ret := _m.Called(nonce, publicKey, userData)

	var r0 []byte
	if rf, ok := ret.Get(0).(func([]byte, []byte, []byte) []byte); ok {
		r0 = rf(nonce, publicKey, userData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte, []byte, []byte) error); ok {
		r1 = rf(nonce, publicKey, userData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InEnclave provides a mock function with given fields:
func (_m *Server) InEnclave() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Start provides a mock function with given fields:
func (_m *Server) Start() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TLSCertFingerprint provides a mock function with given fields:
func (_m *Server) TLSCertFingerprint() (certificate.DigestBytes, error) {
	ret := _m.Called()

	var r0 certificate.DigestBytes
	if rf, ok := ret.Get(0).(func() certificate.DigestBytes); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(certificate.DigestBytes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewServer creates a new instance of Server. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewServer(t mockConstructorTestingTNewServer) *Server {
	mock := &Server{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
