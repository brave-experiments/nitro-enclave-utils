// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	certificate "github.com/blocky/nitriding/internal/certificate"
	mock "github.com/stretchr/testify/mock"
)

// Cert is an autogenerated mock type for the Cert type
type Cert struct {
	mock.Mock
}

// DerBytes provides a mock function with given fields:
func (_m *Cert) DerBytes() certificate.DerBytes {
	ret := _m.Called()

	var r0 certificate.DerBytes
	if rf, ok := ret.Get(0).(func() certificate.DerBytes); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(certificate.DerBytes)
		}
	}

	return r0
}

// Digest provides a mock function with given fields:
func (_m *Cert) Digest() certificate.DigestBytes {
	ret := _m.Called()

	var r0 certificate.DigestBytes
	if rf, ok := ret.Get(0).(func() certificate.DigestBytes); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(certificate.DigestBytes)
		}
	}

	return r0
}

// PemBytes provides a mock function with given fields:
func (_m *Cert) PemBytes() (certificate.PemBytes, error) {
	ret := _m.Called()

	var r0 certificate.PemBytes
	if rf, ok := ret.Get(0).(func() certificate.PemBytes); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(certificate.PemBytes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCert interface {
	mock.TestingT
	Cleanup(func())
}

// NewCert creates a new instance of Cert. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCert(t mockConstructorTestingTNewCert) *Cert {
	mock := &Cert{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
