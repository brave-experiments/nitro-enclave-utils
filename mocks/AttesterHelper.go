// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	attestation "github.com/brave/nitriding/attestation"
	cose "github.com/veraison/go-cose"

	ecdsa "crypto/ecdsa"

	mock "github.com/stretchr/testify/mock"
)

// AttesterHelper is an autogenerated mock type for the AttesterHelper type
type AttesterHelper struct {
	mock.Mock
}

// MakeCOSEMessage provides a mock function with given fields: payload, privateKey
func (_m *AttesterHelper) MakeCOSEMessage(payload []byte, privateKey *ecdsa.PrivateKey) (*cose.Sign1Message, error) {
	ret := _m.Called(payload, privateKey)

	var r0 *cose.Sign1Message
	if rf, ok := ret.Get(0).(func([]byte, *ecdsa.PrivateKey) *cose.Sign1Message); ok {
		r0 = rf(payload, privateKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cose.Sign1Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte, *ecdsa.PrivateKey) error); ok {
		r1 = rf(payload, privateKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MakePCRs provides a mock function with given fields:
func (_m *AttesterHelper) MakePCRs() (map[uint][]byte, error) {
	ret := _m.Called()

	var r0 map[uint][]byte
	if rf, ok := ret.Get(0).(func() map[uint][]byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[uint][]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MarshalCBOR provides a mock function with given fields: obj
func (_m *AttesterHelper) MarshalCBOR(obj interface{}) (attestation.CBOR, error) {
	ret := _m.Called(obj)

	var r0 attestation.CBOR
	if rf, ok := ret.Get(0).(func(interface{}) attestation.CBOR); ok {
		r0 = rf(obj)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(attestation.CBOR)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(obj)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAttesterHelper interface {
	mock.TestingT
	Cleanup(func())
}

// NewAttesterHelper creates a new instance of AttesterHelper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAttesterHelper(t mockConstructorTestingTNewAttesterHelper) *AttesterHelper {
	mock := &AttesterHelper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
