// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	request "github.com/hf/nsm/request"

	response "github.com/hf/nsm/response"
)

// NSMSession is an autogenerated mock type for the NSMSession type
type NSMSession struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *NSMSession) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Read provides a mock function with given fields: into
func (_m *NSMSession) Read(into []byte) (int, error) {
	ret := _m.Called(into)

	var r0 int
	if rf, ok := ret.Get(0).(func([]byte) int); ok {
		r0 = rf(into)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(into)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Send provides a mock function with given fields: req
func (_m *NSMSession) Send(req request.Request) (response.Response, error) {
	ret := _m.Called(req)

	var r0 response.Response
	if rf, ok := ret.Get(0).(func(request.Request) response.Response); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(response.Response)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(request.Request) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewNSMSession interface {
	mock.TestingT
	Cleanup(func())
}

// NewNSMSession creates a new instance of NSMSession. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewNSMSession(t mockConstructorTestingTNewNSMSession) *NSMSession {
	mock := &NSMSession{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
