// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	ecdsa "crypto/ecdsa"

	certificate "github.com/brave/nitriding/certificate"

	mock "github.com/stretchr/testify/mock"

	tls "crypto/tls"
)

// PrivilegedCert is an autogenerated mock type for the PrivilegedCert type
type PrivilegedCert struct {
	mock.Mock
}

// DerBytes provides a mock function with given fields:
func (_m *PrivilegedCert) DerBytes() certificate.DerBytes {
	ret := _m.Called()

	var r0 certificate.DerBytes
	if rf, ok := ret.Get(0).(func() certificate.DerBytes); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(certificate.DerBytes)
		}
	}

	return r0
}

// Digest provides a mock function with given fields:
func (_m *PrivilegedCert) Digest() certificate.DigestBytes {
	ret := _m.Called()

	var r0 certificate.DigestBytes
	if rf, ok := ret.Get(0).(func() certificate.DigestBytes); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(certificate.DigestBytes)
		}
	}

	return r0
}

// PemBytes provides a mock function with given fields:
func (_m *PrivilegedCert) PemBytes() (certificate.PemBytes, error) {
	ret := _m.Called()

	var r0 certificate.PemBytes
	if rf, ok := ret.Get(0).(func() certificate.PemBytes); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(certificate.PemBytes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PrivateKey provides a mock function with given fields:
func (_m *PrivilegedCert) PrivateKey() *ecdsa.PrivateKey {
	ret := _m.Called()

	var r0 *ecdsa.PrivateKey
	if rf, ok := ret.Get(0).(func() *ecdsa.PrivateKey); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecdsa.PrivateKey)
		}
	}

	return r0
}

// TLSCertificate provides a mock function with given fields:
func (_m *PrivilegedCert) TLSCertificate() (tls.Certificate, error) {
	ret := _m.Called()

	var r0 tls.Certificate
	if rf, ok := ret.Get(0).(func() tls.Certificate); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(tls.Certificate)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewPrivilegedCert interface {
	mock.TestingT
	Cleanup(func())
}

// NewPrivilegedCert creates a new instance of PrivilegedCert. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPrivilegedCert(t mockConstructorTestingTNewPrivilegedCert) *PrivilegedCert {
	mock := &PrivilegedCert{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
